"""This notebook is used to prepare the newt dataset for training and evaluation."""

# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/00_dataset_prep.ipynb.

# %% auto 0
__all__ = ['download_kaggle_dataset', 'upload_to_kaggle']

# %% ../nbs/00_dataset_prep.ipynb 4
def download_kaggle_dataset(dataset_name, download_path):
    import os
    import kaggle

    if not os.path.exists(download_path):
        os.makedirs(download_path, exist_ok=True)
        kaggle.api.dataset_download_files(dataset_name, path=download_path, unzip=True)
        print(f"Dataset downloaded to {download_path}")
    else:
        print(f"Dataset already exists at {download_path}")

    return download_path

# %% ../nbs/00_dataset_prep.ipynb 27
def upload_to_kaggle(user_id, title, id, licenses, keywords, dataset_dir):
    import json
    import subprocess
    import os
    from pathlib import Path

    dataset_dir = Path(dataset_dir)
    original_cwd = os.getcwd()

    try:
        # The 'id' in metadata must be in the format 'user_id/dataset_id'
        full_dataset_id = f"{user_id}/{id}"

        # Create dataset metadata for Kaggle
        kaggle_metadata = {
            "title": title,
            "id": full_dataset_id,
            "licenses": licenses,
            "keywords": keywords,
        }
        
        # Write Kaggle dataset metadata
        with open(dataset_dir / "dataset-metadata.json", "w") as f:
            json.dump(kaggle_metadata, f, indent=2)
        
        print("Checking if dataset exists...")
        
        # Check if dataset exists
        check_result = subprocess.run(
            ["kaggle", "datasets", "list", "--user", user_id, "--search", id],
            capture_output=True, text=True
        )
        
        dataset_exists = id in check_result.stdout

        os.chdir(dataset_dir)
        
        print(f"Current directory: {os.getcwd()}")
        print(f"Files to upload: {list(Path('.').iterdir())}")
        
        command = []
        if dataset_exists:
            print("Dataset exists, updating...")
            command = [
                "kaggle", "datasets", "version",
                "-p", ".",
                "-m", "Updated with new dataset",
                "--dir-mode", "zip"
            ]
        else:
            print("Dataset does not exist, creating new...")
            command = [
                "kaggle", "datasets", "create",
                "-p", ".",
                "--dir-mode", "zip"
            ]
        
        result = subprocess.run(command, capture_output=True, text=True, check=True)
        print("✅ Dataset operation successful!")
        print("Output:", result.stdout)

        print(f"\nDataset available at: https://www.kaggle.com/datasets/{full_dataset_id}")
        
    except subprocess.CalledProcessError as e:
        print(f"❌ Error during Kaggle CLI command.")
        print("--- STDERR ---")
        print(e.stderr)
        print("--- STDOUT ---")
        print(e.stdout)
        raise e
    except Exception as e:
        print(f"❌ An unexpected error occurred: {str(e)}")
        raise e
    finally:
        os.chdir(original_cwd)
